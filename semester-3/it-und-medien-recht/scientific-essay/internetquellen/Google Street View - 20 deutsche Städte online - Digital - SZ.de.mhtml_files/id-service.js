async function sha256Ids(e) { "undefined" == typeof TextEncoder && (TextEncoder = function () { }, TextEncoder.prototype.encode = function (e) { const t = new Uint8Array(e.length); for (let n = 0; n < e.length; n += 1)t[n] = e.charCodeAt(n); return t }); for (let t in e.IDs) if (e.IDs[t]) { const n = await crypto.subtle.digest("SHA-256", new TextEncoder("utf-8").encode(e.IDs[t])); e.IDs[t] = Array.prototype.map.call(new Uint8Array(n), e => ("00" + e.toString(16)).slice(-2)).join("") } else e.IDs[t] = null; return e } function getCookieValue(e) { const t = document.cookie.match(new RegExp("(^| )" + e + "=([^;]+)")); return t ? t[2] : null } function getCreid() { const e = dataLayer.filter(e => "c1TrackingResponse" == e.event); if (e.length > 0) { const t = e[0]; if (t.c1TrackingResponse || t.c1TrackingResponse.data || t.c1TrackingResponse.data.tracking_id) return t.c1TrackingResponse.data.tracking_id } return null } function getC1LoginId() { const e = dataLayer.filter(e => "loginStateAvailable" == e.event); if (e.length > 0) { const t = e[0]; if (t.loginState || t.loginState.login) return t.loginState.login } return null } function sendOverPost(e, t) { if (t) { let n = new XMLHttpRequest; return n.open("POST", t, !0), n.withCredentials = !0, n.setRequestHeader("Content-Type", "application/json;charset=UTF-8"), n.send(JSON.stringify(e)), n.responseText } return null } function createDataLayerAndSend(e, t, n, a, i) { let o = {}, s = new Date; return o.timestamp = s.getUTCFullYear() + "-" + ("0" + (s.getUTCMonth() + 1)).slice(-2) + "-" + ("0" + s.getUTCDate()).slice(-2) + " " + ("0" + s.getUTCHours()).slice(-2) + ":" + ("0" + s.getUTCMinutes()).slice(-2) + ":" + ("0" + s.getUTCSeconds()).slice(-2) + "." + s.getUTCMilliseconds(), o.dataLayer_ID = e, o.version = t, o.company = n, o.URL = a, o.event_type = i, o.IDs = { creid: getCreid(), sz_session: getCookieValue("sz-session"), c1_login_id: getC1LoginId(), osc_cuid: getCookieValue("osc_cuid"), sc_uid: new URL(window.location.href).searchParams.get("sc_uid"), _ga: getCookieValue("_ga"), _gid: getCookieValue("_gid"), _sp_v1_uid: getCookieValue("_sp_v1_uid"), aam_uuid: getCookieValue("aam_uuid"), _ain_uid: getCookieValue("_ain_uid"), _ain_cid: getCookieValue("_ain_cid"), consentUUID: getCookieValue("consentUUID") }, o.IDs.sz_session || (o.IDs.sz_session = getCookieValue("sz-session-stage")), sha256Ids(o).then(e => { if (newDataLayer = e, newDataLayerIDs = JSON.stringify(newDataLayer.IDs), oldDataLayer && (oldDataLayerIDs = JSON.stringify(oldDataLayer.IDs)), newDataLayerIDs == oldDataLayerIDs) return null; oldDataLayer = newDataLayer, sendOverPost(newDataLayer, appEngineEndPoint) }), null } function setIntervalLimited(e, t, n) { for (let a = 0; a < n; a++)setTimeout(e, a * t) } const dataLayerId = parseInt("" + parseInt(Date.now()) + Math.floor(1e6 * Math.random())), version = "1.0", hostnameSplit = window.location.hostname.split("."), company = hostnameSplit[hostnameSplit.length - 2], url = window.location.origin + window.location.pathname, eventType = "page_view", appEngineEndPoint = "https://api.id.swmhdata." + company + ".de/"; let oldDataLayer, oldDataLayerIDs, newDataLayer, newDataLayerIDs; createDataLayerAndSend(dataLayerId, "1.0", company, url, eventType), setIntervalLimited(function () { createDataLayerAndSend(dataLayerId, "1.0", company, url, eventType) }, 500, 20);